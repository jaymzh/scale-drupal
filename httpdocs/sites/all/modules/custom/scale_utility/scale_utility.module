<?php

/**
 * Implements hook_form_alter().
 */
function scale_utility_form_alter(&$form, $form_state, $form_id) {
  switch ($form_id) {
    case 'user_profile_form':
      // Changer Gender N/A option.
      //$last_item = array_shift($form['field_gender'][LANGUAGE_NONE]['#options']);
      $form['field_gender'][LANGUAGE_NONE]['#options']['_none'] = 'Decline to State';
      // Changer Age N/A option.
      //$last_item = array_shift($form['field_age'][LANGUAGE_NONE]['#options']);
      $form['field_age'][LANGUAGE_NONE]['#options']['_none'] = 'Decline to State';
      break;

    case 'user_register_form':
      // Changer Gender N/A option.
      //$last_item = array_shift($form['field_gender'][LANGUAGE_NONE]['#options']);
      $form['field_gender'][LANGUAGE_NONE]['#options']['_none'] = 'Decline to State';
      // Changer Age N/A option.
      //$last_item = array_shift($form['field_age'][LANGUAGE_NONE]['#options']);
      $form['field_age'][LANGUAGE_NONE]['#options']['_none'] = 'Decline to State';
      break;

    case 'presentation_node_form':
      global $user;
      // Determine if user is authorized to assign Keynote topic.
      $user_roles = $user->roles;
      $authorized_roles = array(
        'presentation editor',
        'special events editor',
        'sponsorship editor',
        'editor',
        'administrator',
      );
      $common_roles = array_intersect($user_roles, $authorized_roles);
      if (!empty($common_roles)) {
        $keynote_authorized = TRUE;
      }
      else {
        $keynote_authorized = FALSE;
      }
      // Remove options from Presentation Topic list but keep terms in database.
      $remove_topic_terms = array(
        1197, // Container and Orchestrators
        2268, // LibreGraphics
        1205, // Ada Initiative.
        1213, // Apache Bigtop.
        1996, //Badge Hacking.
        1646, // OSS in Enterprise
        6, // Beginner Tutorials.
        8, // Cloud.
        1620, // New to SCALE.
        2520, // Kubeflow.
        15, // Mentoring.
        1210, // OpenSUSE.
        21, // SysAdmin.
        23, // Ubucon.
        881, // Big Data.
        //500, // BoFs.
        879, //Coder's Corner.
        1234, // Entertainment.
        11, // Fedora.
        435, // File System.
        880, // FOSS Camp.
        1221, // GLAD Camp.
        505, // Hot Applications.
        13, // Kernel.
        14, // Keynote.
        1242, //Legal & Licensing.
        434, // Nodestack.
        17, // Open Source Software In Education.
        1647, // Open Source Storage.
        436, // OpenNMS.
        437, // Puppet.
        19, // ScaleU.
        1229, // Testing.
        22, // Try It Lab.
        25, // Youth.
      );
      // Remove Keynote if not authorized. See $authorized_roles above.
      if (!$keynote_authorized) {
        $remove_topic_terms[] = 14; // Keynote.
        $remove_topic_terms[] = 500; // BoFs.
        $remove_topic_terms[] = 1234; // Entertainment.
      }
      foreach ($remove_topic_terms as $remove_term) {
        unset($form['field_topic'][LANGUAGE_NONE]['#options'][$remove_term]);
      }
      // Remove options from Presentation Room list but keep terms in database.
      $remove_room_terms = array();
      /*
        441, // Bel-Air.
        464, // San Lorenzo B.
        465, // San Lorenzo C.
        466, // San Lorenzo D.
        467, // San Lorenzo E.
        468, // San Lorenzo F.
        442, // Carmel.
        443, // Catalina A.
        444, // Catalina B.
        445, // Catalina C.
        446, // Catalina D.
        447, // Century A.
        448, // Century AB.
        449, // Century B.
        450, // Century C.
        451, // Century CD.
        452, // Century D.
        453, // Expo.
        454, // La Jolla.
        455, // Los Angeles A.
        456, // Los Angeles AB.
        457, // Los Angeles B.
        458, // Los Angeles C.
        459, // Marina.
        460, // Newport A.
        461, // Plaza Ballroom.
        1207, // Plaza BC.
        1208, // Plaza D.
        462, // Santa Monica A.
        463, // Santa Monica B.
      );
      */
      foreach ($remove_room_terms as $remove_term) {
        unset($form['field_room'][LANGUAGE_NONE]['#options'][$remove_term]);
        unset($form['field_overflow_room'][LANGUAGE_NONE]['#options'][$remove_term]);
      }

      // Show demographics notice.
      global $user;
      $uid = $user->uid;
      drupal_set_message(t('We\'ve added optional demographic fields to <a target="_blank" href="/user/@uid/edit">your speaker profile</a>. They are not used in CFP selection. Please consider filling it out.', array('@uid' => $uid)), 'status');
      break;
  }
}

/**
 * Implements hook_menu_alter().
 */
function scale_utility_menu_alter(&$items) {
  // Swap out the access callback for user profile pages.
  $items['user/%user']['access callback'] = '_scale_user_view_access';
}

/**
 * Implements hook_permission().
 */
function scale_utility_permission() {
  return array(
    'review presentations' => array(
      'title' => t('Review SCALE presentations'),
      'description' => t('/* optional */'),
      'restrict access' => t('/* optional */'),
      'warning' => t('/* optional */'),
    ),
  );
}

/**
 * User view access callback.
 *
 *   Can either be a full user object or a $uid.
 *   Overriding core user_view_access().
 */
function _scale_user_view_access($account) {
  $uid = is_object($account) ? $account->uid : (int) $account;

  // Never allow access to view the anonymous user account.
  if ($uid) {
    // Admins can view all, users can view own profiles at all times.
    if ($GLOBALS['user']->uid == $uid || user_access('administer users')) {
      return TRUE;
    }
    elseif (user_access('access user profiles')) {
      // Modify to only allow access to current speaker pages. RG 20131208.
      if (!_scale_current_speaker($uid)) {
        return FALSE;
      }
      // At this point, load the complete account object.
      if (!is_object($account)) {
        $account = user_load($uid);
      }
      return (is_object($account) && $account->status);
    }
  }
  return FALSE;
}

/**
 * Determine if a user was a speaker on the given SCALE event.
 **/
function _scale_current_speaker($uid) {
  // Get the SCALE event tid from the path alias
  // Now in the 2nd parameter position
  $path = request_uri();
  $items = explode('/', $path);
  $scale_event = $items[2];
  $scale_event_name = taxonomy_get_term_by_name($scale_event);
  $scale_event_object = array_shift($scale_event_name);
  $scale_event_tid = $scale_event_object->tid;

  // Find out if this speaker is has an accepted presentation for this year.
  $result = db_query(
    'SELECT sp.field_speaker_uid, sp.entity_id, n.status, se.field_scale_event_tid
     FROM {field_data_field_speaker} sp
     JOIN {node} n ON sp.entity_id = n.nid
     JOIN {field_data_field_scale_event} se ON sp.entity_id = se.entity_id
     WHERE n.status = :status AND sp.field_speaker_uid = :uid
     AND se.field_scale_event_tid = :tid',
     array(
       ':status' => 1,
       ':uid' => $uid,
       ':tid' => $scale_event_tid
     )
   );

  $record = $result->fetchAssoc();

  return $record;
}

/**
 * Get SCALE event name from node ID.
 *
 * Used for head title.
 */
function scale_utility_get_scale_event($nid) {
  $node = node_load($nid);
  $term = taxonomy_term_load($node->field_scale_event[LANGUAGE_NONE][0]['tid']);
  return $term->name;

}

/**
 * Implements hook_views_post_execute().
 *
 * Hide room and time from anonymous and speakers while schedule is in flux.
 */
/*
function scale_utility_views_post_execute(&$view) {
  if ($view->name == 'presentation_single') {
    global $user;

    // Roles which may view schedule.
    $schedule_roles = array(
      'administrator',
      'editor',
      'blogger',
      'sponsorship editor',
      'special events editor',
      'presentation editor',
      'presentation reviewer',
    );
    $can_view_schedule = array_intersect($schedule_roles, $user->roles);

    // Limit hiding to single SCALE event.
    $scale_event = $view->args[0];

    if (empty($can_view_schedule) && $scale_event == '14x') {
      unset($view->result[0]->field_field_room);
      unset($view->result[0]->field_field_time);
    }
  }
}
 */
